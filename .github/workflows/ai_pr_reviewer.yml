# ÏõåÌÅ¨ÌîåÎ°úÏö∞Ïùò Ïù¥Î¶Ñ
name: ü§ñ AI PR Reviewer

# ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Ï°∞Í±¥: PRÏù¥ Ïó¥Î¶¨Í±∞ÎÇò, ÏóÖÎç∞Ïù¥Ìä∏ÎêòÍ±∞ÎÇò, Îã§Ïãú Ïó¥Î†∏ÏùÑ Îïå
on:
  pull_request:
    types: [opened, synchronize, reopened]

# Ïã§ÌñâÎê† ÏûëÏóÖ(Job) Î™©Î°ù
jobs:
  review:
    # Ïù¥ ÏûëÏóÖÏù¥ PRÏóê ÎåìÍ∏ÄÏùÑ Ïì∏ Ïàò ÏûàÎèÑÎ°ù Í∂åÌïúÏùÑ Î∂ÄÏó¨Ìï©ÎãàÎã§.
    permissions:
      pull-requests: write
    # ÏµúÏã† Ïö∞Î∂ÑÌà¨ ÌôòÍ≤ΩÏóêÏÑú Ïã§ÌñâÎê©ÎãàÎã§.
    runs-on: ubuntu-latest
    # ÏûëÏóÖÏùò Îã®Í≥Ñ(Step)Îì§
    steps:
      # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      # git diffÎ•º ÏõêÌôúÌïòÍ≤å Ïã§ÌñâÌïòÍ∏∞ ÏúÑÌï¥ Ï†ÑÏ≤¥ git Í∏∞Î°ùÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§ (fetch-depth: 0).
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Î¶¨Î∑∞Ìï† ÏΩòÌÖêÏ∏† Ï§ÄÎπÑ
      - name: Prepare Review Content
        id: prepare_content
        run: |
          # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÏ†ê(diff)ÏùÑ Î¶¨Î∑∞ÌïòÎèÑÎ°ù ÏÑ§Ï†ïÌï©ÎãàÎã§.
          REVIEW_CONTENT=$(git diff origin/${{ github.base_ref }}...HEAD)
          REVIEW_TYPE="Î≥ÄÍ≤ΩÏ†ê"

          # ÎßåÏïΩ PR Ï†úÎ™©Ïóê '[Ï†ÑÏ≤¥ Î¶¨Î∑∞]'Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎã§Î©¥, Ï†ÑÏ≤¥ ÌååÏùº Î¶¨Î∑∞ Î™®ÎìúÎ°ú Ï†ÑÌôòÌï©ÎãàÎã§.
          if [[ "${{ github.event.pull_request.title }}" == *"[Ï†ÑÏ≤¥ Î¶¨Î∑∞]"* ]]; then
            echo "--- Full file review mode activated ---"
            REVIEW_TYPE="ÌååÏùº Ï†ÑÏ≤¥"
            
            # Î≥ÄÍ≤ΩÎêú ÌååÏù¥Ïç¨(.py) ÌååÏùº Î™©Î°ù Ï§ë Ï≤´ Î≤àÏß∏ ÌååÏùºÏùò Ïù¥Î¶ÑÏùÑ Ï∞æÏäµÎãàÎã§.
            TARGET_FILE=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' | head -n 1)
            
            # ÎåÄÏÉÅ ÌååÏùºÏù¥ ÏûàÎã§Î©¥, Í∑∏ ÌååÏùºÏùò Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ ÏùΩÏñ¥ÏòµÎãàÎã§.
            if [[ -n "$TARGET_FILE" ]]; then
              echo "Target file for full review: $TARGET_FILE"
              REVIEW_CONTENT=$(cat "$TARGET_FILE")
            else
              echo "No Python file changed for full review. Using diff instead."
            fi
          fi

          # Îã§Ïùå Îã®Í≥ÑÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù ÎÇ¥Ïö©ÏùÑ ÌååÏùºÏóê Ï†ÄÏû•Ìï©ÎãàÎã§.
          # Ïù¥ Î∞©ÏãùÏùÄ ÌäπÏàòÎ¨∏Ïûê Î¨∏Ï†úÎ•º Í∞ÄÏû• ÌôïÏã§ÌïòÍ≤å Î∞©ÏßÄÌï©ÎãàÎã§.
          echo "$REVIEW_CONTENT" > review_content.txt
          echo "type=$REVIEW_TYPE" >> $GITHUB_OUTPUT

      # 3. jq ÎèÑÍµ¨ ÏÑ§Ïπò
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 4. OpenAI API Ìò∏Ï∂ú
      - name: Call OpenAI API
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e

          # ÌååÏùºÏóêÏÑú Î¶¨Î∑∞Ìï† ÎÇ¥Ïö©ÏùÑ ÏùΩÏñ¥ÏòµÎãàÎã§.
          REVIEW_CONTENT=$(cat review_content.txt)
          
          if [[ "${{ steps.prepare_content.outputs.type }}" == "ÌååÏùº Ï†ÑÏ≤¥" ]]; then
            PROMPT="You are a senior QA engineer. Analyze the following ENTIRE Python code file and provide a concise review comment in Korean. Mention bugs, improvements, or risks if any."
          else
            PROMPT="You are a senior QA engineer. Analyze the following code DIFF and provide a concise review comment in Korean. Mention bugs, improvements, or risks if any."
          fi
          
          # jqÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏïàÏ†ÑÌïòÍ≤å JSON ÏöîÏ≤≠ Î≥∏Î¨∏ÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
          JSON_PAYLOAD=$(jq -n \
            --arg prompt "$PROMPT" \
            --arg content "$REVIEW_CONTENT" \
            '{
              "model": "gpt-3.5-turbo",
              "messages": [
                {"role": "system", "content": $prompt},
                {"role": "user", "content": $content}
              ]
            }')

          curl -s -f -w "\nHTTP_STATUS_CODE:%{http_code}\n" \
            https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD" > response_with_status.txt || true

          # HTTP ÏÉÅÌÉú ÏΩîÎìúÎ•º Î∂ÑÎ¶¨Ìï©ÎãàÎã§.
          HTTP_STATUS=$(grep "HTTP_STATUS_CODE:" response_with_status.txt | cut -d: -f2)
          # ÏàúÏàò ÏùëÎãµ Î≥∏Î¨∏ÏùÑ Î∂ÑÎ¶¨Ìï©ÎãàÎã§.
          grep -v "HTTP_STATUS_CODE:" response_with_status.txt > response.json

          echo "--- OpenAI API Response (Status: $HTTP_STATUS) ---"
          cat response.json
          
          if [[ "$HTTP_STATUS" -ne 200 ]] || jq -e .error < response.json > /dev/null; then
            ERROR_MESSAGE=$(jq -r .error.message < response.json)
            MESSAGE="### ‚ùó AI Î¶¨Î∑∞ ÏÉùÏÑ± Ïã§Ìå® (HTTP ÏÉÅÌÉú: $HTTP_STATUS)\n\n**ÏõêÏù∏:** ${ERROR_MESSAGE:-Ïïå Ïàò ÏóÜÎäî ÏóêÎü¨}"
          else
            MESSAGE=$(jq -r '.choices[0].message.content // "Î¶¨Î∑∞ ÎÇ¥Ïö©ÏùÑ Î∞õÏïÑÏò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§."')
            MESSAGE="### ü§ñ AI ÏΩîÎìú Î¶¨Î∑∞ (${{ steps.prepare_content.outputs.type }})\n\n${MESSAGE}"
          fi
          
          echo "$MESSAGE" > summary.txt
          echo "summary_path=summary.txt" >> "$GITHUB_OUTPUT"

      # 5. AI Î¶¨Î∑∞Î•º PRÏóê ÏΩîÎ©òÌä∏Î°ú ÏûëÏÑ±
      - name: Post AI Review as Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('${{ steps.openai.outputs.summary_path }}', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
