name: 🤖 AI Code Reviewer

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get PR Diff
        id: get_diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }} > diff.txt
          echo "diff_path=diff.txt" >> "$GITHUB_OUTPUT"

      - name: Read Diff to Variable
        id: read_diff
        run: |
          DIFF_CONTENT=$(head -c 15000 diff.txt)
          DIFF_JSON=$(jq -Rs '.' <<< "$DIFF_CONTENT")
          echo "diff_json=$DIFF_JSON" >> "$GITHUB_OUTPUT"

      - name: Call OpenAI API
        id: call_openai
        run: |
          DIFF_JSON=${{ steps.read_diff.outputs.diff_json }}

          REQUEST_DATA=$(jq -n --arg diff "$DIFF_JSON" '{
            model: "gpt-4o",
            messages: [
              {
                role: "system",
                content: "당신은 전문 코드 리뷰어입니다. git diff 내용을 보고 변경사항을 마크다운 형식으로 요약해주세요. 어떤 코드가 변경/추가되었는지 요약하고, 변경 목적도 설명해주세요. 제목은 '🤖 AI 코드 리뷰 요약'으로 시작하고, 마지막 줄에는 '📄 Note: 이 요약은 OpenAI GPT-4o 모델을 사용하여 생성되었습니다.'라고 작성해주세요."
              },
              {
                role: "user",
                content: "```diff\n\($diff)\n```"
              }
            ]
          }')

          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$REQUEST_DATA")

          echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"

      - name: Extract OpenAI Response
        id: parse_response
        run: |
          echo "${{ steps.call_openai.outputs.response }}" | jq -r '.choices[0].message.content // "❗ OpenAI 응답 실패"' > summary.txt
          echo summary<<EOF >> $GITHUB_OUTPUT
          cat summary.txt >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Post AI Review as Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${{ steps.parse_response.outputs.summary }}`
            })
