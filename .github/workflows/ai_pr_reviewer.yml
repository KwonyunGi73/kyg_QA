name: 🤖 AI PR Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # [수정된 부분] PR 제목에 따라 '전체 리뷰' 또는 '변경점 리뷰'를 선택합니다.
      - name: Get Review Content
        id: get_content
        run: |
          # 기본적으로 변경점(diff)을 가져옵니다.
          REVIEW_CONTENT=$(git diff origin/${{ github.base_ref }}...HEAD)
          REVIEW_TYPE="변경점"

          # 만약 PR 제목에 '[전체 리뷰]'가 포함되어 있다면,
          if [[ "${{ github.event.pull_request.title }}" == *"[전체 리뷰]"* ]]; then
            echo "--- Full file review mode activated! ---"
            REVIEW_TYPE="파일 전체"
            
            # 변경된 파이썬(.py) 파일 목록 중 첫 번째 파일의 이름을 찾습니다.
            TARGET_FILE=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' | head -n 1)
            
            # 만약 대상 파일이 있다면, 그 파일의 전체 내용을 읽어옵니다.
            if [[ -n "$TARGET_FILE" ]]; then
              echo "Target file for full review: $TARGET_FILE"
              REVIEW_CONTENT=$(cat "$TARGET_FILE")
            else
              echo "No Python file found for full review. Using diff instead."
            fi
          fi

          # 다음 단계에서 사용할 수 있도록 내용을 저장합니다.
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "type=$REVIEW_TYPE" >> $GITHUB_OUTPUT
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Call OpenAI API
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          
          # [수정된 부분] 리뷰 타입에 따라 프롬프트를 다르게 설정합니다.
          if [[ "${{ steps.get_content.outputs.type }}" == "파일 전체" ]]; then
            PROMPT="You are a senior QA engineer. Analyze the following ENTIRE a Python code file and provide a concise review comment in Korean. Mention bugs, improvements, or risks if any."
          else
            PROMPT="You are a senior QA engineer. Analyze the following code DIFF and provide a concise review comment in Korean. Mention bugs, improvements, or risks if any."
          fi
          
          JSON_PAYLOAD=$(jq -n \
            --arg prompt "$PROMPT" \
            --arg content "${{ steps.get_content.outputs.content }}" \
            '{
              "model": "gpt-3.5-turbo",
              "messages": [
                {"role": "system", "content": $prompt},
                {"role": "user", "content": $content}
              ]
            }')

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD" > response.json

          echo "--- Received a raw response from OpenAI ---"
          cat response.json
          
          if jq -e .error < response.json > /dev/null; then
            ERROR_MESSAGE=$(jq -r .error.message < response.json)
            MESSAGE="### ❗ AI 리뷰 생성 실패\n\n**원인:** ${ERROR_MESSAGE}"
          else
            MESSAGE=$(jq -r '.choices[0].message.content // "리뷰 내용을 받아오지 못했습니다."')
            # [수정된 부분] 리뷰 타입을 댓글에 명시합니다.
            MESSAGE="### 🤖 AI 코드 리뷰 (${{ steps.get_content.outputs.type }})\n\n${MESSAGE}"
          fi
          
          echo "$MESSAGE" > summary.txt
          echo "summary_path=summary.txt" >> "$GITHUB_OUTPUT"

      - name: Post AI Review as Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('${{ steps.openai.outputs.summary_path }}', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
