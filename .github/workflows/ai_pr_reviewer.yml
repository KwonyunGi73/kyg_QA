name: 🤖 AI PR Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        id: get_diff
        run: |
          # PR 대상 브랜치와 현재 브랜치 비교
          diff_output=$(git diff origin/${{ github.base_ref }}...HEAD)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$diff_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Call OpenAI API
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e

          PROMPT="You are a senior QA engineer. Analyze the following code diff and provide a concise review comment in Korean. Mention bugs, improvements, or risks if any."

          JSON_PAYLOAD=$(jq -n \
            --arg prompt "$PROMPT" \
            --arg diff "${{ steps.get_diff.outputs.diff }}" \
            '{
              "model": "gpt-3.5-turbo",
              "messages": [
                {"role": "system", "content": $prompt},
                {"role": "user", "content": $diff}
              ]
            }')

          echo "--- Sending a request to OpenAI... ---"
          echo "$JSON_PAYLOAD"

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD" > response.json

          echo "--- Received a raw response from OpenAI ---"
          cat response.json

          if jq -e .error < response.json > /dev/null; then
            ERROR_MESSAGE=$(jq -r .error.message < response.json)
            MESSAGE="### ❗ AI 리뷰 생성 실패\n\n**원인:** ${ERROR_MESSAGE}"
          else
            MESSAGE=$(jq -r '.choices[0].message.content' < response.json)
          fi

          echo "$MESSAGE" > summary.txt
          echo "summary_path=summary.txt" >> $GITHUB_OUTPUT

      - name: Post AI Review as Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('${{ steps.openai.outputs.summary_path }}', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
